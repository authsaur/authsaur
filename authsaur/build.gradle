import org.apache.tools.ant.taskdefs.condition.*
import org.gradle.internal.logging.text.*
import org.apereo.cas.metadata.*
import java.nio.file.*
import static org.gradle.internal.logging.text.StyledTextOutput.Style

buildscript {
    repositories {
        if (project.privateRepoUrl) {
            maven {
                url project.privateRepoUrl
                credentials {
                    username = project.privateRepoUsername
                    password = System.env.PRIVATE_REPO_TOKEN
                }
            }
        }
        mavenLocal()
        maven {
            url 'https://repo.huaweicloud.com/repository/maven/'
        }
        maven {
            url 'https://maven.repository.redhat.com/ga/'
        }
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
            mavenContent { snapshotsOnly() }
        }
        maven {
            url "https://repo.spring.io/milestone"
            mavenContent { releasesOnly() }
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "io.freefair.gradle:maven-plugin:${project.gradleFreeFairPluginVersion}"
        classpath "io.freefair.gradle:lombok-plugin:${project.gradleFreeFairPluginVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${project.gradleDependencyManagementPluginVersion}"
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${project.jibVersion}"

        classpath "de.undercouch:gradle-download-task:${project.gradleDownloadTaskVersion}"
        classpath "org.apereo.cas:cas-server-core-api-configuration-model:${project.'cas.version'}"
        classpath "org.apereo.cas:cas-server-core-configuration-metadata-repository:${project.'cas.version'}"
    }
}

repositories {
    if (project.privateRepoUrl) {
        maven {
            url project.privateRepoUrl
            credentials {
                username = project.privateRepoUsername
                password = System.env.PRIVATE_REPO_TOKEN
            }
        }
    }
    mavenLocal()
    maven {
        url 'https://repo.huaweicloud.com/repository/maven/'
    }
    maven {
        url 'https://maven.repository.redhat.com/ga/'
    }
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
        mavenContent { snapshotsOnly() }
    }
    maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
    maven {
        url "https://repo.spring.io/milestone"
        mavenContent { releasesOnly() }
    }
}

apply plugin: "io.freefair.war-overlay"
apply plugin: "war"
apply plugin: "org.springframework.boot"
apply plugin: "io.freefair.lombok"

apply from: rootProject.file("gradle/springboot.gradle")
apply from: rootProject.file("gradle/jib.gradle")
apply from: rootProject.file("gradle/tasks.gradle")


configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, "seconds"
        cacheDynamicVersionsFor 0, "seconds"
        preferProjectModules()
        def failIfConflict = project.hasProperty("failOnVersionConflict") && Boolean.valueOf(project.getProperty("failOnVersionConflict"))
        if (failIfConflict) {
            failOnVersionConflict()
        }
    }
}

war {
    entryCompression = ZipEntryCompression.STORED
    enabled = false
}

sourceSets {
    bootRunSources {
        resources {
            srcDirs new File("//etc/cas/templates/"), new File("${project.getProjectDir()}/src/main/resources/")
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(project.targetCompatibility)
    }
}

bootBuildImage {
    imageName = "${project.'containerImageOrg'}/${project.'containerImageName'}:${project.version}"
}

dependencies {
    /**
     * Do NOT modify the lines below or else you will risk breaking dependency management.
     */
    implementation enforcedPlatform("org.apereo.cas:cas-server-support-bom:${project.'cas.version'}")
    implementation platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)

    /**
     * CAS dependencies and modules may be listed here.
     *
     * There is no need to specify the version number for each dependency
     * since versions are all resolved and controlled by the dependency management
     * plugin via the CAS bom.
     **/
    implementation "org.apereo.cas:cas-server-core"
    implementation "org.apereo.cas:cas-server-support-oauth-core-api"
    implementation "org.apereo.cas:cas-server-support-oauth-api"
    implementation "org.apereo.cas:cas-server-support-oauth-webflow"
    implementation "org.apereo.cas:cas-server-support-oauth-services"
    implementation "org.apereo.cas:cas-server-support-oidc"
    implementation "org.apereo.cas:cas-server-support-oidc-services"
    implementation "org.apereo.cas:cas-server-support-oidc-core-api"
    implementation "org.apereo.cas:cas-server-support-oidc-core"
    implementation "org.apereo.cas:cas-server-support-saml-idp"
    implementation "org.apereo.cas:cas-server-support-saml-idp-core"
    implementation "org.apereo.cas:cas-server-support-saml-idp-metadata"
    implementation "org.apereo.cas:cas-server-support-saml-idp-metadata-jpa"
    implementation "org.apereo.cas:cas-server-support-jpa-service-registry"
    implementation "org.apereo.cas:cas-server-support-jdbc-drivers"
    implementation "org.apereo.cas:cas-server-support-jdbc"
    implementation "org.apereo.cas:cas-server-support-jdbc-authentication"
    implementation "org.apereo.cas:cas-server-support-ldap"
    implementation "org.apereo.cas:cas-server-support-ldap-core"
    implementation group: 'org.ldaptive', name: 'ldaptive', version: '2.1.0'
//    implementation "org.apereo.cas:cas-server-support-swagger"
//    implementation "org.apereo.cas:cas-server-support-pm-jdbc"
//    implementation "org.apereo.cas:cas-server-support-simple-mfa"
    implementation "org.apereo.cas:cas-server-support-otp-mfa-core"
    implementation "org.apereo.cas:cas-server-support-gauth"
    implementation "org.apereo.cas:cas-server-support-gauth-jpa"
    implementation "org.apereo.cas:cas-server-support-trusted-mfa"
    implementation "org.apereo.cas:cas-server-support-trusted-mfa-core"
    implementation "org.apereo.cas:cas-server-support-trusted-mfa-jdbc"
//    implementation "org.apereo.cas:cas-server-support-audit-jdbc"
    implementation "org.apereo.cas:cas-server-core-audit-api"
    implementation 'org.apereo.inspektr:inspektr-support-spring:1.8.17.GA'
    implementation "org.apereo.cas:cas-server-support-redis-ticket-registry"
    implementation "org.apereo.cas:cas-server-support-pac4j-core-clients"
    implementation "org.apereo.cas:cas-server-support-jpa-util"
    implementation "org.apereo.cas:cas-server-support-token-webflow"
    implementation group: 'org.jasig.cas.client', name: 'cas-client-core', version: '3.6.1'
//    implementation "org.pac4j:pac4j-core:4.0.3"
    implementation "org.pac4j:pac4j-jwt:5.3.1"
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15to18', version: '1.66'
    implementation "org.apereo.cas:cas-server-support-pac4j-webflow"
    implementation "org.apereo.cas:cas-server-support-pac4j-api"
    implementation "org.apereo.cas:cas-server-core-web-api"
    implementation "org.apereo.cas:cas-server-core-util-api"
    implementation "org.apereo.cas:cas-server-core-services-api"
    implementation "org.apereo.cas:cas-server-core-services-registry"
    implementation "org.apereo.cas:cas-server-core-webflow-api"
    implementation "org.apereo.cas:cas-server-core-webflow"
    implementation "org.apereo.cas:cas-server-core-webflow-mfa-api"
    implementation "org.apereo.cas:cas-server-core-services"
    implementation "org.apereo.cas:cas-server-core-tickets-api"
    implementation "org.apereo.cas:cas-server-core-authentication-api"
    implementation "org.apereo.cas:cas-server-core-authentication-attributes"
    implementation "org.apereo.cas:cas-server-core-authentication-mfa-api"
    implementation "org.apereo.cas:cas-server-support-radius"
    implementation "org.apereo.cas:cas-server-support-token-tickets"
//    implementation "org.apereo.cas:cas-server-support-token-core-api"
//    implementation "org.apereo.cas:cas-server-core-events"
//    implementation "org.apereo.cas:cas-server-support-events-jpa"
//    implementation "org.apereo.cas:cas-server-support-passwordless-webflow"
    implementation "com.deepoove.authsaur:authsaur-server-component-support-notifications-aliyun:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-support-zentao:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-support-pac4j-dingtalk:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-webflow-app:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-webflow-user:6.5.9.1-SNAPSHOT"
//    implementation "org.apereo.cas:cas-server-support-passwordless"
    implementation "com.deepoove.authsaur:authsaur-server-component-core-passwordless-authentication:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-core-authenticator:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-core-person-directory:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-core-event-redis-listener:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-support-saml-idp-metadata-base64:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-core-audit:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-core-audit-jpa:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-core-rest-api:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-core-theme:6.5.9.1-SNAPSHOT"
    implementation "com.deepoove.authsaur:authsaur-server-component-core-multifactor:6.5.9.1-SNAPSHOT"

    testCompileOnly "org.apereo.cas:cas-server-core-authentication"
    testCompileOnly "org.apereo.cas:cas-server-core-logout"

    implementation group: 'com.lmax', name: 'disruptor', version: '3.4.4'
    implementation "org.apereo.cas:cas-server-core-api-configuration-model"
    implementation "org.apereo.cas:cas-server-webapp-init"

    if (project.hasProperty("casModules")) {
        def dependencies = project.getProperty("casModules").split(",")
        dependencies.each {
            def projectsToAdd = rootProject.subprojects.findAll { project ->
                project.name == "cas-server-core-${it}" || project.name == "cas-server-support-${it}"
            }
            projectsToAdd.each { implementation it }
        }
    }


    developmentOnly "org.springframework.boot:spring-boot-devtools:${project.springBootVersion}"
}

